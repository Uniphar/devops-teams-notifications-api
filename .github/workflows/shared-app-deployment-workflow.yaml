name: Shared Application Deployment Workflow

on:
  workflow_call:
    secrets:
      AZURE_TENANT_ID:
        required: true
        description: "Azure Tenant ID"
      AZURE_CLIENT_ID:
        required: true
        description: "Azure Client ID"
      AZURE_SUBSCRIPTION_ID:
        required: true
        description: "Azure Subscription ID"
      ACTIONS_AUTH_APP_ID:
        required: true
        description: "GitHub App ID"
      ACTIONS_AUTH_APP_PRIVATE_KEY:
        required: true
        description: "GitHub App Private Key"
    inputs:
      acrName:
        type: string
        required: true
        description: "Azure Container Registry Name"
      applicationFolder:
        type: string
        required: true
        description: "Application Folder"
      applicationName:
        type: string
        required: true
        description: "Application Name"
      applicationVersion:
        type: string
        required: true
        description: "Application Version"
      environment:
        type: string
        required: true
        description: "Environment"
      singleCluster:
        type: boolean
        required: true
        description: "Deploy to a single cluster or all"

jobs:
  deploy_app:
    name: Deploy Application to ${{ inputs.environment }}
    environment: ${{ inputs.environment }}
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        regionShortCode: ["ne", "we"]
        exclude:
          - regionShortCode: ${{ inputs.singleCluster && 'we' || '_' }}
    steps:
      - name: checkout repo
        uses: actions/checkout@v4

      - name: gh-app-install token
        id: gh-app
        uses: getsentry/action-github-app-token@v3
        with:
          app_id: ${{ secrets.ACTIONS_AUTH_APP_ID }}
          private_key: ${{ secrets.ACTIONS_AUTH_APP_PRIVATE_KEY }}

      - name: checkout devops-azure repo
        uses: actions/checkout@v4
        with:
          path: devops-azure
          repository: Uniphar/devops-azure
          token: ${{ steps.gh-app.outputs.token }}

      - name: azure login
        uses: azure/login@v2
        with:
          client-id: ${{ secrets.AZURE_CLIENT_ID }}
          tenant-id: ${{ secrets.AZURE_TENANT_ID }}
          subscription-id: ${{ secrets.AZURE_SUBSCRIPTION_ID }}
          enable-AzPSSession: true

      - name: setup kubectl
        uses: azure/use-kubelogin@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          kubelogin-version: "latest"

      - name: Gets K8s context
        uses: azure/aks-set-context@v4
        with:
          resource-group: "compute-${{ matrix.regionShortCode }}-${{ inputs.environment }}"
          cluster-name: "compute-aks-${{ matrix.regionShortCode }}-${{ inputs.environment }}-k8s"
          use-kubelogin: "true"
        id: k8context

      - name: setup helm
        uses: azure/setup-helm@v4

      - name: compute environment variables
        run: |
          echo "ACR_NAME=${{ inputs.acrName }}" >> $GITHUB_ENV
          echo "APPLICATION_FOLDER=${{ inputs.applicationFolder }}" >> $GITHUB_ENV
          echo "APPLICATION_NAME=${{ inputs.applicationName }}" >> $GITHUB_ENV
          echo "APPLICATION_VERSION=${{ inputs.applicationVersion }}" >> $GITHUB_ENV

      - name: ACR login
        id: acrLogin
        run: |
          ACR_TOKEN=$(az acr login --name $ACR_NAME --expose-token --output tsv --query accessToken)
          echo "ACR_TOKEN=$ACR_TOKEN" >> $GITHUB_OUTPUT
          az acr login --name $ACR_NAME

      - name: set AKS cluster
        uses: azure/powershell@v2
        with:
          inlineScript: |
            try{
              Import-Module .\devops-azure\src\Uniphar.DevOps.psd1 -ErrorAction Stop -Force

              $AKSClusterServiceAccountClientId = (Get-UniDomainServicePrincipalDetail 'devops' '${{ inputs.environment }}').AppId
              $AzureEntraExternalTenantId = Resolve-UniEntraExternalTenantId -Environment '${{ inputs.environment }}'
              
              echo "AZURE_ENTRA_EXTERNAL_TENANT_ID=$AzureEntraExternalTenantId" >> $env:GITHUB_ENV
              echo "AKS_CLUSTER_SERVICE_ACCOUNT_CLIENT_ID=$AKSClusterServiceAccountClientId" >> $env:GITHUB_ENV
            }
            catch {
              Write-Error $_
              exit 1
            }
          azPSVersion: "latest"

      - name: get helm chart
        working-directory: ./charts/${{ env.APPLICATION_FOLDER }}
        run: helm pull oci://$ACR_NAME.azurecr.io/helm/${{ env.APPLICATION_NAME }} --version $APPLICATION_VERSION

      - name: deploy app
        working-directory: ./charts/${{ env.APPLICATION_FOLDER }}
        run: >
          helm upgrade
          ${{ env.APPLICATION_NAME }}
          ${{ env.APPLICATION_NAME }}-$APPLICATION_VERSION.tgz
          -i
          -f ${{ inputs.environment }}.yaml
          --set reason="Upgrade to $APPLICATION_VERSION"
          --set-string AKSClusterServiceAccountClientId="$AKS_CLUSTER_SERVICE_ACCOUNT_CLIENT_ID"
          --set-string AzureEntraExternalTenantId="$AZURE_ENTRA_EXTERNAL_TENANT_ID"
          -n devops
          --atomic
