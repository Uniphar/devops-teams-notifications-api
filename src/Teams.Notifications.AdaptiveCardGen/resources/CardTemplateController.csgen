// AUTOGENERATED, but if this is the csgen file, can be checked, by changing to .cs and moving it into Teams.Notifications.Api=> ControllerTemplate
// And changing:
// CardTemplate <=> {{name}}
// ReSharper disable once CheckNamespace
namespace Teams.Notifications.Api.Controllers;

[ApiController]
[Authorize(Policy = Const.AuthorizationPolicyWriter, AuthenticationSchemes = "NotificationScheme")]
public class {{name}}Controller : ControllerBase
{
    private const string jsonFileName = "{{name}}.json";
    private readonly ICardManagerService _cardManagerService;
    private readonly ICustomEventTelemetryClient _telemetry;
    public {{name}}Controller(ICardManagerService cardManagerService, ICustomEventTelemetryClient telemetry)
    {
        _cardManagerService = cardManagerService;
        _telemetry = telemetry;
    }

    /// <summary>
    ///     Creates or updates the file error in teams
    /// </summary>
    /// <param name="model">Information that needs to be sent to teams</param>
    /// <param name="teamName">Teamname you want to sent the message into</param>
    /// <param name="channelName">Channel you want to sent the message into</param>
    /// <param name="cancellationToken">CancellationToken for when the application stops, mostly used for the bot</param>
    [HttpPost("{{name}}")]
    // with swagger response you can give it a description
    [ProducesResponseType(StatusCodes.Status500InternalServerError)]
    [SwaggerResponse(StatusCodes.Status200OK, "Creates a card or updates it")]
    [SwaggerResponse(StatusCodes.Status400BadRequest, "You are doing something wrong!")]
    [Authorize(Policy = Const.AuthorizationPolicyWriter, AuthenticationSchemes = "NotificationScheme")]
    public async Task<IActionResult> Post({{name}}Model model, [FromQuery(Name = "TeamName")] string teamName, [FromQuery(Name = "ChannelName")] string channelName, CancellationToken cancellationToken)
    {
        using (_telemetry.WithProperties(new { CreateOrUpdateCardForModel = "{{name}}Model" }))
            await _cardManagerService.CreateOrUpdateAsync(jsonFileName, null, model, teamName, channelName, cancellationToken);
            return Ok();
    }
    [HttpPost("{{name}}WithFile")]
    // with swagger response you can give it a description
    [ProducesResponseType(StatusCodes.Status500InternalServerError)]
    [SwaggerResponse(StatusCodes.Status200OK, "Creates a card with file or updates it")]
    [SwaggerResponse(StatusCodes.Status400BadRequest, "You are doing something wrong!")]
    [Authorize(Policy = Const.AuthorizationPolicyWriter, AuthenticationSchemes = "NotificationScheme")]
    public async Task<IActionResult> PostWithFile([FromQuery] {{name}}Model model, IFormFile file, [FromQuery(Name = "TeamName")] string teamName, [FromQuery(Name = "ChannelName")] string channelName, CancellationToken cancellationToken)
    {
        using (_telemetry.WithProperties(new { CreateOrUpdateCardForModel = "{{name}}Model" }))
            await _cardManagerService.CreateOrUpdateAsync(jsonFileName, file, model, teamName, channelName, cancellationToken);
            return Ok();
    }

    /// <summary>
    ///     Deletes the card based on the id
    /// </summary>
    /// <param name="uniqueId">The id used to know what card to delete, required</param>
    /// <param name="teamName">Teamname you want to sent the message into</param>
    /// <param name="channelName">Channel you want to sent the message into</param>
    /// <param name="cancellationToken">CancellationToken for when the application stops, mostly used for the bot</param>
    [HttpDelete("{{name}}")]
    [Produces("application/json")]
    // with swagger response you can give it a description
    [ProducesResponseType(StatusCodes.Status500InternalServerError)]
    [SwaggerResponse(StatusCodes.Status200OK, "Deletes a card")]
    [SwaggerResponse(StatusCodes.Status400BadRequest, "You are doing something wrong!")]
    [Authorize(Policy = Const.AuthorizationPolicyWriter, AuthenticationSchemes = "NotificationScheme")]
    public async Task<IActionResult> Delete(string uniqueId, [FromQuery(Name = "TeamName")] string teamName, [FromQuery(Name = "ChannelName")] string channelName, CancellationToken cancellationToken)
    {
       using (_telemetry.WithProperties(new { DeleteCardForModel = "{{name}}Model" }))
           await _cardManagerService.DeleteCardAsync(jsonFileName, uniqueId, teamName, channelName, cancellationToken);
           return Ok();
    }

    [HttpGet("{{name}}")]
    [Produces("application/json")]
    // with swagger response you can give it a description
    [ProducesResponseType(StatusCodes.Status500InternalServerError)]
    [SwaggerResponse(StatusCodes.Status200OK, "Gets a card", typeof(AdaptiveCard))]
    [SwaggerResponse(StatusCodes.Status400BadRequest, "You are doing something wrong!")]
    [Authorize(Policy = Const.AuthorizationPolicyWriter, AuthenticationSchemes = "NotificationScheme")]
    public async Task<ObjectResult> Get(string uniqueId, [FromQuery(Name = "TeamName")] string teamName, [FromQuery(Name = "ChannelName")] string channelName, CancellationToken cancellationToken)
    {
       using (_telemetry.WithProperties(new { GetCardForModel = "{{name}}Model" }))
          return await _cardManagerService.GetCardAsync(jsonFileName, uniqueId, teamName, channelName, cancellationToken);
         
    }
}