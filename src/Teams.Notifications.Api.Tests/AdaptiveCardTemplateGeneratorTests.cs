using Microsoft.CodeAnalysis.CSharp.Testing;
using Microsoft.CodeAnalysis.Testing;
using System.Collections.Immutable;
using Teams.Notifications.AdaptiveCardGen;

namespace Teams.Notifications.Api.Tests
{
    [TestClass]
    public class AdaptiveCardTemplateGeneratorTests
    {
        [TestMethod]
        public async Task Generator_Produces_Output_For_Valid_Template()
        {
            // Arrange: create a fake .json template as additional text
            var templateContent = @"{
                ""type"": ""AdaptiveCard"",
                ""version"": ""1.0"",
                ""body"": [],
                ""actions"": []
            }";
            var context = new CSharpSourceGeneratorTest<AdaptiveCardTemplateGenerator, DefaultVerifier>
            {
                TestState =
                {
                    GeneratedSources =
                    {
                        (typeof(AdaptiveCardTemplateGenerator), "SampleCardModel.g.cs", "namespace Teams.Notifications.Api.Models;\r\npublic class SampleCardModel : BaseTemplateModel\r\n{\r\n\r\n}"),
                        (typeof(AdaptiveCardTemplateGenerator), "SampleCardController.g.cs", "// AUTOGENERATED, but if this is the csgen file, can be checked, by changing to .cs and moving it into Teams.Notifications.Api=> ControllerTemplate\r\n// And changing:\r\n// CardTemplateController <=>SampleCardController\r\n// CardTemplateModel <=>  SampleCardModel\r\n// CardTemplate.json <=> SampleCard.json\r\n// ReSharper disable once CheckNamespace\r\nusing Swashbuckle.AspNetCore.Annotations;\r\nusing Microsoft.AspNetCore.Authorization;\r\nusing Microsoft.AspNetCore.Mvc;\r\nusing Teams.Notifications.Api.Services.Interfaces;\r\n\r\nnamespace Teams.Notifications.Api.Controllers;\r\n\r\n[Microsoft.AspNetCore.Mvc.Route(\"[controller]\")]\r\n[ApiController]\r\n[Authorize(Policy = Const.AuthorizationPolicyWriter, AuthenticationSchemes = \"NotificationScheme\")]\r\npublic class SampleCardController : ControllerBase\r\n{\r\n    private const string jsonFileName = \"SampleCard.json\";\r\n    private readonly ICardManagerService _cardManagerService;\r\n    public SampleCardController(ICardManagerService cardManagerService)\r\n    {\r\n        _cardManagerService = cardManagerService;\r\n    }\r\n\r\n    /// <summary>\r\n    ///     Creates or updates the file error in teams\r\n    /// </summary>\r\n    /// <param name=\"model\">Information that needs to be sent to teams</param>\r\n    /// <param name=\"teamName\">Teamname you want to sent the message into</param>\r\n    /// <param name=\"channelName\">Channel you want to sent the message into</param>\r\n    [HttpPost]\r\n    // with swagger response you can give it a description\r\n    [ProducesResponseType(StatusCodes.Status500InternalServerError)]\r\n    [SwaggerResponse(StatusCodes.Status200OK, \"Creates a new file error or updates it\")]\r\n    [SwaggerResponse(StatusCodes.Status400BadRequest, \"You are doing something wrong!\")]\r\n    [Authorize(Policy = Const.AuthorizationPolicyWriter, AuthenticationSchemes = \"NotificationScheme\")]\r\n    public async Task<IActionResult> Post(SampleCardModel model, [FromQuery(Name = \"TeamName\")] string teamName = \"Notifications Platform\", [FromQuery(Name = \"ChannelName\")] string channelName= \"File Errors\")\r\n    {\r\n        await _cardManagerService.CreateOrUpdate(jsonFileName, model, teamName, channelName);\r\n        return Ok();\r\n    }\r\n\r\n    /// <summary>\r\n    ///     Deletes the card based on the id\r\n    /// </summary>\r\n    /// <param name=\"uniqueId\">The id used to know what card to delete, required</param>\r\n    /// <param name=\"teamName\">Teamname you want to sent the message into</param>\r\n    /// <param name=\"channelName\">Channel you want to sent the message into</param>\r\n    [HttpDelete]\r\n    [Produces(\"application/json\")]\r\n    // with swagger response you can give it a description\r\n    [ProducesResponseType(StatusCodes.Status500InternalServerError)]\r\n    [SwaggerResponse(StatusCodes.Status200OK, \"Creates a new file error or updates it\")]\r\n    [SwaggerResponse(StatusCodes.Status400BadRequest, \"You are doing something wrong!\")]\r\n    [Authorize(Policy = Const.AuthorizationPolicyWriter, AuthenticationSchemes = \"NotificationScheme\")]\r\n    public async Task<IActionResult> Delete(string uniqueId, [FromQuery(Name = \"TeamName\")] string teamName = \"Notifications Platform\", [FromQuery(Name = \"ChannelName\")] string channelName= \"File Errors\")\r\n    {\r\n       await _cardManagerService.DeleteCard(jsonFileName, uniqueId, teamName, channelName);\r\n\r\n       return Ok();\r\n    }\r\n}")
                    },

                    AdditionalFiles = { new ValueTuple<string, string>("Templates/SampleCard.json", templateContent) }
                },
                ReferenceAssemblies = ReferenceAssemblies.Net.Net90
                    .AddPackages([
                        new PackageIdentity("Microsoft.AspNetCore.App.Ref", "9.0.2"),
                        new PackageIdentity("Swashbuckle.AspNetCore.Annotations", "9.0.1")
                    ]).AddAssemblies(["Microsoft.AspNetCore.Mvc","Teams.Notifications.Api"])
            };
            await context.RunAsync();
        }
    }
}